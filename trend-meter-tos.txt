def ap = hlc3; # input(hlc3, "Wave Trend - Source")
def n1 = 9;
def n2 = 12;
input averageType = AverageType.EXPONENTIAL;
def esa = MovingAverage(averageType, hlc3, n1);

def de = MovingAverage(averageType, AbsValue(hlc3 - esa), n1);

def ci = (ap - esa) / (0.015 * de);

def tci = MovingAverage(averageType, ci, n2);
def wt1 = tci;

input simpleaverageType = AverageType.SIMPLE;
def wt2 = MovingAverage(simpleaverageType, wt1, 3);

# Wave Trend - Overbought & Oversold lines
def obLevel2 = 60;  # input( 60,  "Wave Trend - WT Very Overbought")
def obLevel = 50;  # input( 50,  "Wave Trend - WT Overbought")
def osLevel = -50;  # input(-50,  "Wave Trend - WT Oversold")
def osLevel2 = -60;  # input(-60,  "Wave Trend - WT Very Oversold")

# Wave Trend - Conditions
#def WTCross = wt1 crosses wt2;
def WTCrossUp = wt2 - wt1 <= 0;
def WTCrossDown = wt2 - wt1 >= 0;
def WTOverSold = wt2 <= osLevel2;
def WTOverBought = wt2 >= obLevel2;

#plot wt11 = wt1;
#plot wt21 = wt2;

# draw arrowDown here
plot ArrowUp = wt1 crosses above wt2;
plot ArrowDown = wt1 crosses below wt2;
plot WTCross = wt1 crosses wt2;

ArrowUp.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
ArrowDown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
WTCross.SetPaintingStrategy(PaintingStrategy.BOOLEAN_POINTS);

# MA Inputs

def MA1_Length = 5; #input.int(5, title='Fast MA', minval=1, group='Trend Bar 1 - Settings', inline='TB1 Fast')
input MA1_Type = AverageType.EXPONENTIAL; #input.string(title='', defval='EMA', options=['EMA', 'SMA'], group='Trend Bar 1 - Settings', inline='TB1 Fast')

def MA2_Length = 11; # input.int(11, title='Slow MA', minval=1, group='Trend Bar 1 - Settings', inline='TB1 Slow')
input MA2_Type = AverageType.EXPONENTIAL; #input.string(title='', defval='EMA', options=['EMA', 'SMA'], group='Trend Bar 1 - Settings', inline='TB1 Slow')

def MA3_Length = 13; #input.int(13, title='Fast MA', minval=1, group='Trend Bar 2 - Settings', inline='TB2 Fast')
input MA3_Type = AverageType.EXPONENTIAL; #input.string(title='', defval='EMA', options=['EMA', 'SMA'], group='Trend Bar 2 - Settings', inline='TB2 Fast')

def MA4_Length  = 36; #input.int(36, title='Slow MA', minval=1, group='Trend Bar 2 - Settings', inline='TB2 Slow')
input MA4_Type = AverageType.EXPONENTIAL; #input.string(title='', defval='SMA', options=['EMA', 'SMA'], group='Trend Bar 2 - Settings', inline='TB2 Slow')

# MA Calculations

# Close = request.security(syminfo.tickerid, timeframe.period, close, lookahead=barmerge.lookahead_on)
def Close = Close;

def MA1 = MovingAverage(averageType, Close, MA1_Length);

def MA2 = MovingAverage(averageType, Close, MA2_Length);

def MA3 = MovingAverage(averageType, Close, MA3_Length);

def MA4 = MovingAverage(averageType, Close, MA4_Length);

# MA Crossover Condition
def MACrossover1 = if MA1 > MA2 then 1 else 0;

def MACrossover2 = if MA3 > MA4 then 1 else 0;

# MA Direction Condition

def MA1Direction = if  MA1 > MA1[1] then 1 else 0;

def MA2Direction = if MA2 > MA2[1] then 1 else 0;

def MA3Direction = if MA3 > MA3[1] then 1 else 0;

def MA4Direction = if MA4 > MA4[1] then 1 else 0;

# MA Direction Change Condition

def MA1PositiveDirectionChange = if MA1Direction and !MA1Direction[1] then 1 else 0;

def MA2PositiveDirectionChange = if MA2Direction and !MA2Direction[1] then 1 else 0;

def MA3PositiveDirectionChange = if MA3Direction and !MA3Direction[1] then 1 else 0;

def MA4PositiveDirectionChange = if MA4Direction and !MA4Direction[1] then 1 else 0;


def MA1NegativeDirectionChange = if !MA1Direction and MA1Direction[1] then 1 else 0;

def MA2NegativeDirectionChange = if !MA2Direction and MA2Direction[1] then 1 else 0;

def MA3NegativeDirectionChange = if !MA3Direction and MA3Direction[1] then 1 else 0;

def MA4NegativeDirectionChange = if !MA4Direction and MA4Direction[1] then 1 else 0;

# // MACD and MOM & DAD - Top Dog Trading
# 
# // Standard MACD Calculations
# 
# MACDfastMA = 12
# MACDslowMA = 26
# MACDsignalSmooth = 9
# 
# 
# MACDLine = ta.ema(close, MACDfastMA) - ta.ema(close, MACDslowMA)
# 
# SignalLine = ta.ema(MACDLine, MACDsignalSmooth)
# 
# MACDHistogram = MACDLine - SignalLine
# 
# 
# // MACD- Background Color Change Condition
# 
# MACDHistogramCross = MACDHistogram > 0 ? 1 : 0
# 
# MACDLineOverZero = MACDLine > 0 ? 1 : 0
# 
# MACDLineOverZeroandHistogramCross = MACDHistogramCross and MACDLineOverZero ? 1 : 0
# 
# MACDLineUnderZeroandHistogramCross = not MACDHistogramCross and not MACDLineOverZero ? 1 : 0

# // Fast MACD Calculations

def FastMACDfastMA = 8;
def FastMACDslowMA = 21;
def FastMACDsignalSmooth = 5;

input MAExp = AverageType.EXPONENTIAL;
def MACDfastMA = MovingAverage(MAExp, Close, FastMACDfastMA);
def MACDslowMA = MovingAverage(MAExp, Close, FastMACDslowMA);

def FastMACDLine = MACDfastMA - MACDslowMA;

def FastSignalLine = MovingAverage(MAExp, FastMACDLine, FastMACDsignalSmooth);

def FastMACDHistogram = FastMACDLine - FastSignalLine;

# // Fast MACD- Background Color Change Condition
def FastMACDHistogramCross = if FastMACDHistogram > 0 then 1 else 0;

def FastMACDLineOverZero = if FastMACDLine > 0 then 1 else 0;

def FastMACDLineOverZeroandHistogramCross = if FastMACDHistogramCross and FastMACDLineOverZero then 1 else 0;

def FastMACDLineUnderZeroandHistogramCross = if !FastMACDHistogramCross and !FastMACDLineOverZero then 1 else 0;

# // Top Dog Trading - Mom Dad Calculations
# 
# TopDog_Fast_MA = 5
# TopDog_Slow_MA = 20
# TopDog_Sig = 30
# 
# 
# TopDogMom = ta.ema(close, TopDog_Fast_MA) - ta.ema(close, TopDog_Slow_MA)
# 
# TopDogDad = ta.ema(TopDogMom, TopDog_Sig)
# 
# // Top Dog Dad - Background Color Change Condition
# 
# TopDogDadDirection = TopDogDad > TopDogDad[1] ? 1 : 0
# 
# TopDogMomOverDad = TopDogMom > TopDogDad ? 1 : 0
# 
# TopDogMomOverZero = TopDogMom > 0 ? 1 : 0
# 
# TopDogDadDirectandMomOverZero = TopDogDadDirection and TopDogMomOverZero ? 1 : 0
# 
# TopDogDadDirectandMomUnderZero = not TopDogDadDirection and not TopDogMomOverZero ? 1 : 0

#////// Trend Barmeter Calculations //////

#// UCS_Trend / Trend Candles Trend Barmeter Calculations

#//UCS_Trend by ucsgears copy Trend Candles
#//Interpretation of TTM Trend bars. It is really close to the actual. 

def haclose = FundamentalType.OHLC4;
#def haopen = 0.0;
def haopen = if IsNaN (haopen[1]) then (open + Close) / 2 else (haopen[1] + haclose[1]) / 2;


#//hahigh = max(high, max(haopen, haclose))
#//halow = min(low, min(haopen, haclose))

def ccolor = if haclose - haopen > 0 then 1 else 0;

def inside6 = if haopen <= Max(haopen[6], haclose[6]) and haopen >= Min(haopen[6], haclose[6]) and haclose <= Max(haopen[6], haclose[6]) and haclose >= Min(haopen[6], haclose[6]) then 1 else 0;

def inside5 = if haopen <= Max(haopen[5], haclose[5]) and haopen >= Min(haopen[5], haclose[5]) and haclose <= Max(haopen[5], haclose[5]) and haclose >= Min(haopen[5], haclose[5]) then 1 else 0;

def inside4 = if haopen <= Max(haopen[4], haclose[4]) and haopen >= Min(haopen[4], haclose[4]) and haclose <= Max(haopen[4], haclose[4]) and haclose >= Min(haopen[4], haclose[4]) then 1 else 0;

def inside3 = if haopen <= Max(haopen[3], haclose[3]) and haopen >= Min(haopen[3], haclose[3]) and haclose <= Max(haopen[3], haclose[3]) and haclose >= Min(haopen[3], haclose[3]) then 1 else 0;

def inside2 = if haopen <= Max(haopen[2], haclose[2]) and haopen >= Min(haopen[2], haclose[2]) and haclose <= Max(haopen[2], haclose[2]) and haclose >= Min(haopen[2], haclose[2]) then 1 else 0;

def inside1 = if haopen <= Max(haopen[1], haclose[1]) and haopen >= Min(haopen[1], haclose[1]) and haclose <= Max(haopen[1], haclose[1]) and haclose >= Min(haopen[1], haclose[1]) then 1 else 0;


def colorvalue = if inside6 
        then ccolor[6] 
    else if inside5 
        then ccolor[5] 
    else if inside4
        then ccolor[4]
    else if inside3 
        then ccolor[3] 
    else if inside2 
        then ccolor[2] 
    else if inside1 
        then ccolor[1] 
    else ccolor;

#def TrendBarTrend_Candle_Color = if colorvalue then Color.GREEN else Color.RED;

def TrendBarTrend_Candle = if colorvalue then 1 else 0;